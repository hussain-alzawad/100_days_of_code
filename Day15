# this was day 15's task. I optimized the code to be more scalable in case we deal with a different currency or added more types of coffee 

MENU = {
    "espresso": {
        "ingredients": {
            "water": 50,
            "coffee": 18,
            "milk": 0,
        },
        "cost": 1.5,
    },
    "latte": {
        "ingredients": {
            "water": 200,
            "milk": 150,
            "coffee": 24,
        },
        "cost": 2.5,
    },
    "cappuccino": {
        "ingredients": {
            "water": 250,
            "milk": 100,
            "coffee": 24,
        },
        "cost": 3.0,
    }
}
resources = {
    "water": 1040,
    "milk": 500,
    "coffee": 200,
}
options = {
    "e": "espresso",
    "l": "latte",
    "c": "cappuccino",
    "q": "quit",
    "r": "resources"
}
coins = {"quarters": 0.25, "dimes": 0.10, "nickles": 0.05, "pennies": 0.01}


def showResources():
    print(resources)


def checkAvailability(resources, order):
    for resource in resources:
        if resources[resource] >= MENU[order]["ingredients"][resource]:
            return True
        else:
            print(f"not enough {resource}")
            return False


def money_calc():
    return sum(
        int(input(f"How many {coin}? ")) * value
        for coin, value in coins.items())


def makeOrder(type):
    for resource in resources:
        resources[resource] -= MENU[type]["ingredients"][resource]


Machine_working = True
while Machine_working:
    order = input("espresso / latte/ cappuccino: ")
    if order == "r":
        showResources
    elif order == "q":
        
        Machine_working = False
    else:
        if checkAvailability(resources, order):
            balance = money_calc()
            if balance >= MENU[order]["cost"]:
                balance -= MENU[order]["cost"]
                print(
                    f"here is your {order} and your change is {round(balance,3)} "
                )
                makeOrder(order)
